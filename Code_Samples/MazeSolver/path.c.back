/**have three mazes, the actual maze, the final solution maze, and then another maze that saves what youve already tried, doesn't set back to 0, so you know what it's tried before and won't go back, then in your checker make sure solution is 0 and extra maze is also 0*/

#include <stdio.h>
#include <stdlib.h>
#include "header.h"

/**2D dynamically allocated arrays to store maze information*/
int **maze;
int **solution;
int **trackPaths;
int *line;
int i, j, c, SIZE;

void findMazeSize(void)
{
	SIZE = 0;
	/**MAZE-find size of first line, set variable to size, then loop through and assign the rest of the values*/
	/**SOLUTION && TRACKPATHS - loop through, create 2D component, loop through and set to 0*/
	line = (int*)malloc(50 * sizeof(int));
	c = getchar();
	while(c != '\n')
	{
		SIZE++;
		line[SIZE-1] = c;
		c = getchar();
	}

	line = (int*)realloc(line, SIZE*sizeof(int));
	/**create size for maze*/
	
	maze = (int**)malloc(SIZE*sizeof(int*));
	solution = (int**)malloc(SIZE*sizeof(int*));
	trackPaths = (int**)malloc(SIZE*sizeof(int*));
	
	for(i = 0; i < SIZE; i++)
	{
		maze[i] = (int*)malloc(SIZE * sizeof(int));
	}
	maze[0] = line;
	/**fill in values for maze*/
	for(i = 1; i < SIZE; i++)
	{
		for(j = 0; j < SIZE; j++)
		{
			c = getchar();	
			
			if (c != '\n')
			{
				maze[i][j] = c;
			}else 
			{
				c = getchar();
				maze[i][j] = c;
			}	
			
		}
	}

	/**create size for solution and trackPaths*/
	for(i = 0; i < SIZE; i++)
	{
		solution[i] = (int*)malloc(SIZE*sizeof(int));
		trackPaths[i] = (int*)malloc(SIZE*sizeof(int));
	}

	/**all values for solution and trackpaths to 0*/
	 for(i = 0; i < SIZE; i++)
        {
                for(j = 0; j < SIZE; j++)
                {
			solution[i][j] = 48;
			trackPaths[i][j] = 48;
		}
        }


}

int solve(int row, int col)
{
	printMaze();
	printf("enters method\n");
	if(row == SIZE-1 && col == SIZE -1)
	{
		solution[row][col] = 49;
		return 1;
	}

	printf("row %d, col %d, maze %c, solution %c, track %c\n", row, col, maze[row][col], solution[row][col], trackPaths[row][col]);
	if(row < SIZE && col < SIZE&& maze[row][col] == 49  && solution[row][col] == 48 && trackPaths[row][col] == 48)
	{
		printf("true\n");
		solution[row][col] = 49;
		trackPaths[row][col] = 49;
		
		/**right*/
		if(solve(row, col+1))
		{
			printf("go right");
			return 1;
		}
		/**down*/
		else if(solve(row+1, col))
		{
			printf("go down");
			return 1;
		}
		/**backtracking*/
		else
		{
			solution[row][col] = 48;
			return 0;	
		}
	}

	return 0;
}


void print(void)
{
	printf("PATH FOUND!");
	for(i = 0; i < SIZE; i++)
	{
		for(j = 0; j < SIZE; j++)
		{
			printf("%c", solution[i][j]);
		}
		printf("\n");
	}
}



void printMaze(void)
{

	printf("  MAZE    SOLUTION    TRACe\n");	
	for(i = 0; i < SIZE; i++)
        {
                for(j = 0; j < SIZE; j++)
                {
                        printf("%c",maze[i][j]);
                }
		printf("        ");
		for(j = 0; j < SIZE; j++)
                {
                        printf("%c", solution[i][j]);
                }
		printf("        ");
                for(j = 0; j < SIZE; j++)
                {
                        printf("%c", trackPaths[i][j]);
                }

                printf("\n");
        }
}

void freeMem(void)
{
	for(i = 0; i < SIZE; i++)
	{
		free(maze[i]);
		free(solution[i]);
		free(trackPaths[i]);
	}

	free(maze);
	free(solution);
	free(trackPaths);

}


